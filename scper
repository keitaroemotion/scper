#!/usr/bin/env python

from itertools import izip
import os
import os.path
import re
import subprocess
import sys

def current_dir_name():
    x = os.getcwd().split("/")
    return x[len(x)-1]

def to_dict(xs):
    dict = {}
    for x in xs:
        if len(x) > 1:
            dict[x[0]] = str(x[1])
    return dict    

def reduce(path):
    ps = path.split("/")
    return "/".join(ps[0:len(ps)-1])

def configure_secret_file():
    shell("vim {}".format(secret_file_path()))

def secret_file_path():
    dir_name  = current_dir_name()
    dir_path  = "/usr/local/etc/scper/{}".format(current_dir_name())
    file_path = "/usr/local/etc/scper/{}/secrets".format(current_dir_name())
    shell("mkdir -p {}".format(dir_path))
    if not (os.path.isfile(file_path)):
        default = ("\n").join([
            "ip=xxx.xxx.xx.xxx",
            "user=username",
            "port=443",
            "key=/Users/someuser/somewhere/somewhere.pem",
            "base_dir=/home/user/webrootdir",
            "\n",
        ])
        shell("touch {}".format(file_path))
        f= open(file_path, "w")
        f.write(default)
        f.close()
        sys.exit("you need to add {}".format(file_path))
    return file_path    

def get_secrets():
    return (map(lambda x: x.rstrip('\n\r').split('='), open(secret_file_path())))

def command_to_aws(key, user, ip):
    return "ssh -i {} {}@{}".format(key, user, ip)

def command_to_move_scp_file(key, user, ip, file, base_dir):
    return "scp -i {} {} {}@{}:{}/{}".format(key, file, user, ip, (base_dir), file)

def command_to_bring_scp_file(key, user, ip, file, base_dir):
    return "scp -i {} {}@{}:{}/{} {}".format(key, user, ip, reduce(base_dir), file, file)

def command_to_move_diffs(key, user, ip, base_dir, files):
    return ";".join(map(lambda file: "scp -i {} {} {}@{}:{}/{}".format(key, file, user, ip, reduce(base_dir), file), files))

def command_to_scp_r(key, user, ip, base_dir, dir):
    return "scp -i {} -r {} {}@{}:{}/{}".format(key, dir, user, ip, base_dir, dir)
   
def command_to_remotely_execute(key, user, ip, base_dir, command):
    return "ssh -i {} {}@{} \"cd {}; {}\"".format(key, user, ip, base_dir, command)

def shell(command):
    print(command)
    os.system(command)

def help():
    print("")
    print("-h             ... help menu")
    print("-c             ... configure secret file")
    print("-g             ... go to aws")
    print("-f [file_path] ... scp send a file")
    print("-b [file_path] ... scp bring a file")
    print("-d             ... scp send a file of git status new file|modified")
    print("-r [dir_path]  ... scp send files recursively")
    print("-t [command]   ... scp remotely execute arbiterary command")
    print("")

def raise_error(arg_target, another_condition = True):
    if len(sys.argv) < arg_target + 1 and another_condition:
        help()
        sys.exit("you need argument")

def git_status():
    status = str(subprocess.check_output(['git', 'status'])).split("\n")
    return map(lambda l: max(l.split(":   ")), filter(lambda l: l.startswith("\tnew file") or l.startswith("\tmodified"), status))

secrets  = to_dict(get_secrets())
key      = secrets["key"]
user     = secrets["user"]
ip       = secrets["ip"]
base_dir = secrets["base_dir"]

raise_error(1)
option  = sys.argv[1]

argv_2 = ""
if option == "-f" or option == "-r" or option == "-t" or option == "-b":
    raise_error(2)
    argv_2 = sys.argv[2]

options = {
    "-d": command_to_move_diffs(key, user, ip, base_dir, git_status()),
    "-g": command_to_aws(key, user, ip),
    "-b": command_to_bring_scp_file(key, user, ip, argv_2, base_dir),
    "-f": command_to_move_scp_file(key, user, ip, argv_2, base_dir),
    "-r": command_to_scp_r(key, user, ip, base_dir, argv_2),
    "-t": command_to_remotely_execute(key, user, ip, base_dir, argv_2),
}

command = (options.get(option, None))

if option == "-c":
    configure_secret_file()
elif command == None:
    help()
else:
    shell(command)
